#+TITLE: Structural Transformation

/guix-packaging.el/ provides stateful, reversible, content-agnostic code lenses to
allow you to restructure package definitions to suit your preferences.

This is similar to refactoring. For example, one might create a macro with tools
like ~transpose-regions~ and ~replace-string~ to rename and re-order the
sections of a package definition. However, after such a refactoring, you're left
with code that is not trivial to merge with that from other collaborators. What
relationship then will you maintain with the upstream? You can:

1. Maintain your own fork of Guix and stop submitting patches upstream
2. Send your structural edits as patches and try to convince everybody else to
   accept them
3. Undo your structural edits temporarily whenever it's time to send patches

The structural transformation capabilites of /guix-packaging.el/ are designed to
make *option 3* super convenient by enabling you to switch package definitions
between different structures using just a few keystrokes.

*** Definitions

- Content-agnostic ::
  A code lens is content-agnostic when it affects only the structure of a
  package definition, not its meaning.
- Stateful ::
  A code lens is stateful when it remembers what the code used to look like,
  even between editing sessions and even without using source control.
- Reversible ::
  A code lens is reversible when you can use it to travel from one structural
  state to another without any restrictions or loss of information.

Put together, these properties enable you to restructure your definitions with
confidence that you can quickly return to a previous structural state without
affecting the meaning of the code.
